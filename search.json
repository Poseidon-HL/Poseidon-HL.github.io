[{"title":"Linux chsh 命令","url":"/2022/09/11/Linux-chsh-%E5%91%BD%E4%BB%A4/","content":"Linux chsh命令用于更换用户shell\n在/etc/shells文件中存储了可使用的shell信息，可以在查看后再进行选择修改\n- 修改当前用户的shell:  chsh- Change the login shell of the current user:  chsh -s &#123;&#123;path/to/shell&#125;&#125;- Change the login shell for a given user:  chsh -s &#123;&#123;path/to/shell&#125;&#125; &#123;&#123;username&#125;&#125;- List available shells:  chsh --list-shells","categories":["Linux 命令"]},{"title":"Linux du 命令","url":"/2022/09/09/Linux-du-%E5%91%BD%E4%BB%A4/","content":"Linux du 命令用于查看目录或文件的大小\n- 展示目录或子目录的大小 B/Kib/MiB:  du -&#123;&#123;b|k|m&#125;&#125; &#123;&#123;path/to/directory&#125;&#125;- 展示目录或文件的大小 -h便于阅读:  du -h &#123;&#123;path/to/directory&#125;&#125;- Show the size of a single directory, in human-readable units:  du -sh &#123;&#123;path/to/directory&#125;&#125;- List the human-readable sizes of a directory and of all the files and directories within it:  du -ah &#123;&#123;path/to/directory&#125;&#125;- List the human-readable sizes of a directory and any subdirectories, up to N levels deep:  du -h --max-depth=N &#123;&#123;path/to/directory&#125;&#125;- List the human-readable size of all .jpg files in subdirectories of the current directory, and show a cumulative total at the end:  du -ch &#123;&#123;*/*.jpg&#125;&#125;","categories":["Linux 命令"],"tags":["Linux"]},{"title":"Linux find 命令","url":"/2022/09/11/Linux-find-%E5%91%BD%E4%BB%A4/","content":"Linux find命令用于查找文件或目录\n- 通过表达式查找文件:  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.ext&#125;&#125;&#x27;- 通过路径或文件名查找文件:  find &#123;&#123;root_path&#125;&#125; -path &#x27;&#123;&#123;**/path/**/*.ext&#125;&#125;&#x27; -or -name &#x27;&#123;&#123;*pattern*&#125;&#125;&#x27;- Find directories matching a given name, in case-insensitive mode:  find &#123;&#123;root_path&#125;&#125; -type d -iname &#x27;&#123;&#123;*lib*&#125;&#125;&#x27;- Find files matching a given pattern, excluding specific paths:  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.py&#125;&#125;&#x27; -not -path &#x27;&#123;&#123;*/site-packages/*&#125;&#125;&#x27;- Find files matching a given size range:  find &#123;&#123;root_path&#125;&#125; -size &#123;&#123;+500k&#125;&#125; -size &#123;&#123;-10M&#125;&#125;- Run a command for each file (use &#123;&#125; within the command to access the filename):  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.ext&#125;&#125;&#x27; -exec &#123;&#123;wc -l &#123;&#125; &#125;&#125;\\;- Find files modified in the last 7 days and delete them:  find &#123;&#123;root_path&#125;&#125; -daystart -mtime -&#123;&#123;7&#125;&#125; -delete- Find empty (0 byte) files and delete them:  find &#123;&#123;root_path&#125;&#125; -type &#123;&#123;f&#125;&#125; -empty -delete","categories":["Linux 命令"]},{"title":"Linux passwd 命令","url":"/2022/09/15/Linux-passwd-%E5%91%BD%E4%BB%A4/","content":"passwd用于改变用户密码\n- Change the password of the current user interactively:  passwd- Change the password of a specific user:  passwd &#123;&#123;username&#125;&#125;- Get the current status of the user:  passwd -S- Make the password of the account blank (it will set the named account passwordless):  passwd -d"},{"title":"Linux uname 命令","url":"/2022/09/09/Linux-uname-%E5%91%BD%E4%BB%A4/","content":"Linux uname 命令用于显示系统信息\n- Print kernel name:  uname- Print system architecture and processor information:  uname --machine --processor- Print kernel name, kernel release and kernel version:  uname --kernel-name --kernel-release --kernel-version- Print system hostname:  uname --nodename- Print all available system information:  uname --all","categories":["Linux 命令"]},{"title":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-003-%E5%89%8D-n-%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD-1-%E7%9A%84%E4%B8%AA%E6%95%B0/","content":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数DescriptionDifficulty: 简单  \nRelated Topics: 位运算, 动态规划\n给定一个非负整数 n，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。\n示例 1:\n输入: n = 2输出: [0,1,1]解释: 0 --&gt; 01 --&gt; 12 --&gt; 10\n\n示例 2:\n输入: n = 5输出: [0,1,1,2,1,2]解释:0 --&gt; 01 --&gt; 12 --&gt; 103 --&gt; 114 --&gt; 1005 --&gt; 101\n\n说明 :\n\n0 &lt;&#x3D; n &lt;&#x3D; 105\n\n进阶:\n\n给出时间复杂度为 O(n*sizeof(integer))的解答非常容易。但你可以在线性时间 O(n)内用一趟扫描做到吗？\n要求算法的空间复杂度为 O(n) 。\n你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。\n\n注意：本题与主站 338 题相同：https://leetcode-cn.com/problems/counting-bits/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;int&gt; countBits(int n) &#123;        vector&lt;int&gt; result;        for (int i = 0; i &lt;= n;i++) &#123;            if (i == 0) &#123;                result.push_back(0);            &#125; else if (i % 2 == 0) &#123;                result.push_back(result[i / 2]);            &#125; else &#123;                result.push_back(result[i / 2] + 1);            &#125;        &#125;        return result;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["位运算","动态规划","简单"]},{"title":"剑指 Offer II 038. 每日温度","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-038-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","content":"剑指 Offer II 038. 每日温度DescriptionDifficulty: 中等  \nRelated Topics: 栈, 数组, 单调栈\n请根据每日 气温 列表 temperatures ，重新生成一个列表，要求其对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。\n示例 1:\n输入: temperatures = [73,74,75,71,69,72,76,73]输出: [1,1,4,2,1,1,0,0]\n\n示例 2:\n输入: temperatures = [30,40,50,60]输出: [1,1,1,0]\n\n示例 3:\n输入: temperatures = [30,60,90]输出: [1,1,0]\n\n提示：\n\n1 &lt;&#x3D; temperatures.length &lt;&#x3D; 105\n30 &lt;= temperatures[i] &lt;= 100\n\n注意：本题与主站 739 题相同： https://leetcode-cn.com/problems/daily-temperatures/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) &#123;        stack&lt;pair&lt;int,int&gt;&gt; tmp;        vector&lt;int&gt; res;        for (int i = temperatures.size() - 1;i &gt;= 0;i--) &#123;            while (tmp.size() != 0 &amp;&amp; temperatures[i] &gt;= tmp.top().first) &#123;                tmp.pop();            &#125;            if (tmp.size() == 0) &#123;                res.push_back(0);            &#125; else &#123;                res.push_back(tmp.top().second - i);            &#125;            tmp.push(make_pair(temperatures[i],i));        &#125;        vector&lt;int&gt; reverse;        for (int i = res.size() - 1;i &gt;= 0;i--) &#123;            reverse.push_back(res[i]);        &#125;        return reverse;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["栈","数组","单调栈"]},{"title":"剑指 Offer II 014. 字符串中的变位词","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-014-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8F%98%E4%BD%8D%E8%AF%8D/","content":"剑指 Offer II 014. 字符串中的变位词DescriptionDifficulty: 中等  \nRelated Topics: 哈希表, 双指针, 字符串, 滑动窗口\n给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1的某个变位词。\n换句话说，第一个字符串的排列之一是第二个字符串的 子串 。\n示例 1：\n输入: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;输出: True解释: s2 包含 s1 的排列之一 (&quot;ba&quot;).\n\n示例 2：\n输入: s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;输出: False\n\n提示：\n\n1 &lt;&#x3D; s1.length, s2.length &lt;&#x3D; 104\ns1 和 s2 仅包含小写字母\n\n注意：本题与主站 567 题相同： https://leetcode-cn.com/problems/permutation-in-string/\nSolutionLanguage: C++\nclass Solution &#123;public:    int tar[26];    int src[26];    bool isEqual() &#123;        for (int i = 0;i &lt; 26;i++) &#123;            if(tar[i] != src[i]) &#123;                return false;            &#125;        &#125;        return true;    &#125;    bool checkInclusion(string s1, string s2) &#123;        if (s1.length() &gt; s2.length()) &#123;            return false;        &#125;        for (int i = 0;i &lt; s1.length();i++) &#123;            src[s1[i] - &#x27;a&#x27;]++;            tar[s2[i] - &#x27;a&#x27;]++;        &#125;        int start = 0;        int end = s1.length();        while (end &lt; s2.length()) &#123;            if (isEqual()) &#123;                return true;            &#125;            tar[s2[start++] - &#x27;a&#x27;]--;            tar[s2[end++] - &#x27;a&#x27;]++;        &#125;        if (isEqual()) &#123;            return true;        &#125;        return false;","categories":["剑指 Offer II"],"tags":["哈希表","双指针","字符串","滑动窗口"]},{"title":"剑指 Offer II 046. 二叉树的右侧视图","url":"/2022/09/13/%E5%89%91%E6%8C%87-Offer-II-046-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E4%BE%A7%E8%A7%86%E5%9B%BE/","content":"剑指 Offer II 046. 二叉树的右侧视图DescriptionDifficulty: 中等  \nRelated Topics: 树, 深度优先搜索, 广度优先搜索, 二叉树\n给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。\n示例 1:\n\n输入: [1,2,3,null,5,null,4]输出: [1,3,4]\n\n示例 2:\n输入: [1,null,3]输出: [1,3]\n\n示例 3:\n输入: []输出: []\n\n提示:\n\n二叉树的节点个数的范围是 [0,100]\n-100 &lt;= Node.val &lt;= 100\n\n \n注意：本题与主站 199 题相同：https://leetcode-cn.com/problems/binary-tree-right-side-view/\nSolutionLanguage: C++\n *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */class Solution &#123;public:    // 层序遍历 用队列    vector&lt;int&gt; res;    vector&lt;int&gt; rightSideView(TreeNode* root) &#123;        queue&lt;TreeNode*&gt; tmp;        tmp.push(root);        while (tmp.size() != 0 &amp;&amp; root != nullptr) &#123;            int num = tmp.size();            while (num) &#123;                TreeNode* topEle = tmp.front();                tmp.pop();                if (num == 1) &#123;                    res.push_back(topEle -&gt; val);                &#125;                if (topEle -&gt; left != nullptr) &#123;                    tmp.push(topEle -&gt; left);                &#125;                if (topEle -&gt; right != nullptr) &#123;                    tmp.push(topEle -&gt; right);                &#125;                num--;            &#125;        &#125;","categories":["剑指 Offer II"],"tags":["树","深度优先搜索","广度优先搜索","二叉树"]},{"title":"剑指 Offer II 047. 二叉树剪枝","url":"/2022/09/13/%E5%89%91%E6%8C%87-Offer-II-047-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/","content":"剑指 Offer II 047. 二叉树剪枝DescriptionDifficulty: 中等  \nRelated Topics: 树, 深度优先搜索, 二叉树\n给定一个二叉树 根节点 root ，树的每个节点的值要么是 0，要么是 1。请剪除该二叉树中所有节点的值为 0 的子树。\n节点 node 的子树为 node 本身，以及所有 node 的后代。\n示例 1:\n输入: [1,null,0,0,1]输出: [1,null,0,null,1] 解释: 只有红色节点满足条件“所有不包含 1 的子树”。右图为返回的答案。\n\n示例 2:\n输入: [1,0,1,0,0,0,1]输出: [1,null,1,null,1]解释: \n\n示例 3:\n输入: [1,1,0,1,1,0,1,0]输出: [1,1,0,1,1,null,1]解释: \n\n提示:\n\n二叉树的节点个数的范围是 [1,200]\n二叉树节点的值只会是 0 或 1\n\n注意：本题与主站 814 题相同：https://leetcode-cn.com/problems/binary-tree-pruning/\nSolutionLanguage: C++\n *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */class Solution &#123;public:    bool DFS(TreeNode* root) &#123;        if (root == nullptr) &#123;            return true;        &#125;        bool leftRes = DFS(root -&gt; left);        bool rightRes = DFS(root -&gt; right);        if (leftRes) &#123;            root -&gt; left = nullptr;        &#125;        if (rightRes) &#123;            root -&gt; right = nullptr;        &#125;        if (leftRes &amp;&amp; rightRes &amp;&amp; root -&gt; val == 0) &#123;            return true;        &#125;        return false;    &#125;    TreeNode* pruneTree(TreeNode* root) &#123;        if (DFS(root)) &#123;            return nullptr;        &#125;        return root;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["树","深度优先搜索","二叉树"]},{"title":"剑指 Offer II 050. 向下的路径节点之和","url":"/2022/09/13/%E5%89%91%E6%8C%87-Offer-II-050-%E5%90%91%E4%B8%8B%E7%9A%84%E8%B7%AF%E5%BE%84%E8%8A%82%E7%82%B9%E4%B9%8B%E5%92%8C/","content":"剑指 Offer II 050. 向下的路径节点之和DescriptionDifficulty: 中等  \nRelated Topics: 树, 深度优先搜索, 二叉树\n给定一个二叉树的根节点 root ，和一个整数 targetSum ，求该二叉树里节点值之和等于 targetSum 的 路径 的数目。\n路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。\n示例 1：\n\n输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8输出：3解释：和等于 8 的路径有 3 条，如图所示。\n\n示例 2：\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22输出：3\n\n提示:\n\n二叉树的节点个数的范围是 [0,1000]\n-109 &lt;&#x3D; Node.val &lt;&#x3D; 109 \n-1000 &lt;= targetSum &lt;= 1000\n\n \n注意：本题与主站 437 题相同：https://leetcode-cn.com/problems/path-sum-iii/\nSolutionLanguage: C++\n * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */class Solution &#123;public:    int count = 0;    long long target = target;    vector&lt;long long&gt; DFS(TreeNode* root) &#123;        vector&lt;long long&gt; res;        if (root == nullptr) &#123;            return res;        &#125;        vector&lt;long long&gt; leftRes = DFS(root -&gt; left);        vector&lt;long long&gt; rightRes = DFS(root -&gt; right);        for (int i = 0;i &lt; leftRes.size();i++) &#123;            if (leftRes[i] + root -&gt; val == target) &#123;                count++;            &#125;            res.push_back(leftRes[i] + root -&gt; val);        &#125;        for (int i = 0;i &lt; rightRes.size();i++) &#123;            if (rightRes[i] + root -&gt; val == target) &#123;                count++;            &#125;            res.push_back(rightRes[i] + root -&gt; val);","categories":["剑指 Offer II"],"tags":["树","深度优先搜索","二叉树"]},{"title":"剑指 Offer II 049. 从根节点到叶节点的路径数字之和","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-049-%E4%BB%8E%E6%A0%B9%E8%8A%82%E7%82%B9%E5%88%B0%E5%8F%B6%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/","content":"剑指 Offer II 049. 从根节点到叶节点的路径数字之和DescriptionDifficulty: 中等  \nRelated Topics: 树, 深度优先搜索, 二叉树\n给定一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。\n每条从根节点到叶节点的路径都代表一个数字：\n\n例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。\n\n计算从根节点到叶节点生成的 所有数字之和 。\n叶节点 是指没有子节点的节点。\n示例 1：\n\n输入：root = [1,2,3]输出：25解释：从根到叶子节点路径 1-&gt;2 代表数字 12从根到叶子节点路径 1-&gt;3 代表数字 13因此，数字总和 = 12 + 13 = 25\n\n示例 2：\n\n输入：root = [4,9,0,5,1]输出：1026解释：从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491从根到叶子节点路径 4-&gt;0 代表数字 40因此，数字总和 = 495 + 491 + 40 = 1026\n\n提示：\n\n树中节点的数目在范围 [1, 1000] 内\n0 &lt;= Node.val &lt;= 9\n树的深度不超过 10\n\n注意：本题与主站 129 题相同： https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/\nSolutionLanguage: C++\n/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */class Solution &#123;public:    int sum = 0;    void DFS(TreeNode* root, int i) &#123;        if (root == nullptr) &#123;            return;        &#125;        i = i * 10 + root -&gt; val;        if (root -&gt; left == nullptr &amp;&amp; root -&gt; right == nullptr) &#123;            sum += i;        &#125;        DFS(root -&gt; left, i);        DFS(root -&gt; right, i);    &#125;    int sumNumbers(TreeNode* root) &#123;        DFS(root,0);        return sum;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["树","深度优先搜索","二叉树"]},{"title":"剑指 Offer II 062. 实现前缀树","url":"/2022/09/15/%E5%89%91%E6%8C%87-Offer-II-062-%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E6%A0%91/","content":"剑指 Offer II 062. 实现前缀树DescriptionDifficulty: 中等  \nRelated Topics: 设计, 字典树, 哈希表, 字符串\n**Trie**（发音类似 “try”）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。\n请你实现 Trie 类：\n\nTrie() 初始化前缀树对象。\nvoid insert(String word) 向前缀树中插入字符串 word 。\nboolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。\nboolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。\n\n示例：\n输入inputs = [&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]inputs = [[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]输出[null, null, true, false, true, null, true]解释Trie trie = new Trie();trie.insert(&quot;apple&quot;);trie.search(&quot;apple&quot;);   // 返回 Truetrie.search(&quot;app&quot;);     // 返回 Falsetrie.startsWith(&quot;app&quot;); // 返回 Truetrie.insert(&quot;app&quot;);trie.search(&quot;app&quot;);     // 返回 True\n\n提示：\n\n1 &lt;= word.length, prefix.length &lt;= 2000\nword 和 prefix 仅由小写英文字母组成\ninsert、search 和 startsWith 调用次数 总计 不超过 3 * 104 次\n\n注意：本题与主站 208 题相同：https://leetcode-cn.com/problems/implement-trie-prefix-tree/ \nSolutionLanguage: C++\n    bool search(string word) &#123;        Trie* node = this;        for (char c : word) &#123;            int index = c - &#x27;a&#x27;;            if (node -&gt; children[index] == nullptr) &#123;                return false;            &#125;            node = node -&gt; children[index];        &#125;    &#125;        /** Returns if the word is in the trie. */            node = node -&gt; children[index];        &#125;        node -&gt; isEnd = true;            if (node -&gt; children[index] == nullptr) &#123;                node -&gt; children[index] = new Trie();            &#125;        for (char c : word) &#123;            int index = c - &#x27;a&#x27;;    /** Inserts a word into the trie. */    void insert(string word) &#123;        Trie* node = this;    bool isEnd;    Trie():children(26),isEnd(false) &#123;&#125;    public:    /** Initialize your data structure here. */    vector&lt;Trie*&gt; children;class Trie &#123;","tags":["哈希表","字符串","设计","字典树"]},{"title":"剑指 Offer II 054. 所有大于等于节点的值之和","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-054-%E6%89%80%E6%9C%89%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC%E4%B9%8B%E5%92%8C/","content":"剑指 Offer II 054. 所有大于等于节点的值之和DescriptionDifficulty: 中等  \nRelated Topics: 树, 深度优先搜索, 二叉搜索树, 二叉树\n给定一个二叉搜索树，请将它的每个节点的值替换成树中大于或者等于该节点值的所有节点值之和。\n提醒一下，二叉搜索树满足下列约束条件：\n\n节点的左子树仅包含键 小于 节点键的节点。\n节点的右子树仅包含键 大于 节点键的节点。\n左右子树也必须是二叉搜索树。\n\n示例 1：\n\n输入：root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n\n示例 2：\n输入：root = [0,null,1]输出：[1,null,1]\n\n示例 3：\n输入：root = [1,0,2]输出：[3,3,2]\n\n示例 4：\n输入：root = [3,2,4,1]输出：[7,9,4,10]\n\n提示：\n\n树中的节点数介于 0 和 104之间。\n每个节点的值介于 -104 和 104 之间。\n树中的所有值 互不相同 。\n给定的树为二叉搜索树。\n\n注意：\n\n本题与主站 538 题相同： https://leetcode-cn.com/problems/convert-bst-to-greater-tree/\n本题与主站 1038 题相同：https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/\n\nSolutionLanguage: C++\n/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */class Solution &#123;public:    int DFS(TreeNode* root, int sum) &#123;        if (root == nullptr) &#123;            return sum;        &#125;        root -&gt; val += DFS(root -&gt; right, sum);        return DFS(root -&gt; left, root -&gt; val);    &#125;    TreeNode* convertBST(TreeNode* root) &#123;        DFS(root,0);        return root;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["树","深度优先搜索","二叉树","二叉搜索树"]},{"title":"剑指 Offer II 085. 生成匹配的括号","url":"/2022/09/13/%E5%89%91%E6%8C%87-Offer-II-085-%E7%94%9F%E6%88%90%E5%8C%B9%E9%85%8D%E7%9A%84%E6%8B%AC%E5%8F%B7/","content":"剑指 Offer II 085. 生成匹配的括号DescriptionDifficulty: 中等  \nRelated Topics: 字符串, 动态规划, 回溯\n正整数 n 代表生成括号的对数，请设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。\n示例 1：\n输入：n = 3输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]\n\n示例 2：\n输入：n = 1输出：[&quot;()&quot;]\n\n提示：\n\n1 &lt;= n &lt;= 8\n\n注意：本题与主站 22 题相同： https://leetcode-cn.com/problems/generate-parentheses/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;string&gt; res;    int N;    void DFS(int left, int right, string now) &#123;        if (left &lt; 0) &#123;            return;        &#125;        if (now.length() == N) &#123;            res.push_back(now);            return;        &#125;        if (left &lt; right) &#123;            DFS(left,right - 1, now + &quot;)&quot;);        &#125;        DFS(left - 1, right, now + &quot;(&quot;);    &#125;    vector&lt;string&gt; generateParenthesis(int n) &#123;        N = n * 2;        DFS(n,n,&quot;&quot;);        return res;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["动态规划","字符串","回溯"]},{"title":"剑指 Offer II 100. 三角形中最小路径之和","url":"/2022/09/13/%E5%89%91%E6%8C%87-Offer-II-100-%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%AD%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E4%B9%8B%E5%92%8C/","content":"剑指 Offer II 100. 三角形中最小路径之和DescriptionDifficulty: 中等  \nRelated Topics: 数组, 动态规划\n给定一个三角形 triangle ，找出自顶向下的最小路径和。\n每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。\n示例 1：\n输入：triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]输出：11解释：如下面简图所示：   2  3 4 6 5 74 1 8 3自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\n\n示例 2：\n输入：triangle = [[-10]]输出：-10\n\n提示：\n\n1 &lt;= triangle.length &lt;= 200\ntriangle[0].length == 1\ntriangle[i].length == triangle[i - 1].length + 1\n-104 &lt;&#x3D; triangle[i][j] &lt;&#x3D; 104\n\n进阶：\n\n你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题吗？\n\n注意：本题与主站 120 题相同： https://leetcode-cn.com/problems/triangle/\nSolutionLanguage: C++\nclass Solution &#123;public:    int minimumTotal(vector&lt;vector&lt;int&gt;&gt;&amp; triangle) &#123;        for (int level = 1;level &lt; triangle.size();level++) &#123;            triangle[level][0] += triangle[level - 1][0];            triangle[level][triangle[level].size() - 1] += triangle[level - 1][triangle[level - 1].size() - 1];            for (int i = 1;i &lt; triangle[level].size() - 1;i++) &#123;                triangle[level][i] += min(triangle[level - 1][i - 1],triangle[level - 1][i]);            &#125;        &#125;        int minPath = triangle[triangle.size() - 1][0];        for (int i = triangle[triangle.size() - 1].size() - 1;i &gt;= 0;i--) &#123;            minPath = min(minPath,triangle[triangle.size() - 1][i]);        &#125;        return minPath;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["动态规划","数组"]},{"title":"剑指 Offer II 092. 翻转字符","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-092-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6/","content":"剑指 Offer II 092. 翻转字符DescriptionDifficulty: 中等  \nRelated Topics: 字符串, 动态规划\n如果一个由 &#39;0&#39; 和 &#39;1&#39; 组成的字符串，是以一些 &#39;0&#39;（可能没有 &#39;0&#39;）后面跟着一些 &#39;1&#39;（也可能没有 &#39;1&#39;）的形式组成的，那么该字符串是 **单调递增 **的。\n我们给出一个由字符 &#39;0&#39; 和 &#39;1&#39; 组成的字符串 s，我们可以将任何 &#39;0&#39; 翻转为 &#39;1&#39; 或者将 &#39;1&#39; 翻转为 &#39;0&#39;。\n返回使 s **单调递增 **的最小翻转次数。\n示例 1：\n输入：s = &quot;00110&quot;输出：1解释：我们翻转最后一位得到 00111.\n\n示例 2：\n输入：s = &quot;010110&quot;输出：2解释：我们翻转得到 011111，或者是 000111。\n\n示例 3：\n输入：s = &quot;00011000&quot;输出：2解释：我们翻转得到 00000000。\n\n提示：\n\n1 &lt;= s.length &lt;= 20000\ns 中只包含字符 &#39;0&#39; 和 &#39;1&#39;\n\n注意：本题与主站 926 题相同： https://leetcode-cn.com/problems/flip-string-to-monotone-increasing/\nSolutionLanguage: C++\nclass Solution &#123;public:    int minFlipsMonoIncr(string s) &#123;        vector&lt;int&gt; s1;        vector&lt;int&gt; s2;        int leftOne = 0;        int rightZero = 0;        int j = s.length() - 1;        for (int i = 0;i &lt; s.length();i++) &#123;            s1.push_back(leftOne);            s2.push_back(rightZero);            if (s[i] == &#x27;1&#x27;) &#123;                leftOne++;            &#125;            if (s[j] == &#x27;0&#x27;) &#123;                rightZero++;            &#125;            j--;        &#125;        int minRes = s.length();        for (int i = 0;i &lt; s1.size();i++) &#123;            minRes = min(minRes,s1[i] + s2[s1.size() - 1 - i]);        &#125;        return minRes;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["动态规划","字符串"]},{"title":"剑指 Offer II 110. 所有路径","url":"/2022/09/15/%E5%89%91%E6%8C%87-Offer-II-110-%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/","content":"剑指 Offer II 110. 所有路径DescriptionDifficulty: 中等  \nRelated Topics: 深度优先搜索, 广度优先搜索, 图, 回溯\n给定一个有 n 个节点的有向无环图，用二维数组 graph 表示，请找到所有从 0 到 n-1 的路径并输出（不要求按顺序）。\ngraph 的第 i 个数组中的单元都表示有向图中 i 号节点所能到达的下一些结点（译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a ），若为空，就是没有下一个节点了。\n示例 1：\n\n输入：graph = [[1,2],[3],[3],[]]输出：[[0,1,3],[0,2,3]]解释：有两条路径 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3\n\n示例 2：\n\n输入：graph = [[4,3,1],[3,2,4],[3],[4],[]]输出：[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n\n示例 3：\n输入：graph = [[1],[]]输出：[[0,1]]\n\n示例 4：\n输入：graph = [[1,2,3],[2],[3],[]]输出：[[0,1,2,3],[0,2,3],[0,3]]\n\n示例 5：\n输入：graph = [[1,3],[2],[3],[]]输出：[[0,1,2,3],[0,3]]\n\n提示：\n\nn == graph.length\n2 &lt;= n &lt;= 15\n0 &lt;= graph[i][j] &lt; n\ngraph[i][j] != i \n保证输入为有向无环图 (GAD)\n\n注意：本题与主站 797 题相同：https://leetcode-cn.com/problems/all-paths-from-source-to-target/\nSolutionLanguage: C++\nclass Solution &#123;public:    set&lt;int&gt; visited;    int n;    vector&lt;vector&lt;int&gt;&gt; res;    vector&lt;vector&lt;int&gt;&gt; graphS;    void DFS(vector&lt;int&gt;&amp; path,int num) &#123;        path.push_back(num);        visited.insert(num);        if (num == n) &#123;            res.push_back(path);        &#125; else &#123;            for (int i = 0;i &lt; graphS[num].size();i++) &#123;                DFS(path,graphS[num][i]);            &#125;        &#125;        visited.erase(num);        path.pop_back();    &#125;    vector&lt;vector&lt;int&gt;&gt; allPathsSourceTarget(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;        n = graph.size() - 1;        graphS = graph;        vector&lt;int&gt; path;        DFS(path,0);        return res;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["深度优先搜索","广度优先搜索","回溯"]},{"title":"剑指 Offer II 116. 省份数量","url":"/2022/09/15/%E5%89%91%E6%8C%87-Offer-II-116-%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F/","content":"剑指 Offer II 116. 省份数量DescriptionDifficulty: 中等  \nRelated Topics: 深度优先搜索, 广度优先搜索, 并查集, 图\n有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。\n省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。\n给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。\n返回矩阵中 省份 的数量。\n示例 1：\n\n输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]输出：2\n\n示例 2：\n\n输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]输出：3\n\n提示：\n\n1 &lt;= n &lt;= 200\nn == isConnected.length\nn == isConnected[i].length\nisConnected[i][j] 为 1 或 0\nisConnected[i][i] == 1\nisConnected[i][j] == isConnected[j][i]\n\n注意：本题与主站 547 题相同： https://leetcode-cn.com/problems/number-of-provinces/\nSolutionLanguage: C++\n        &#125;    &#125;    void unionij(int i, int j) &#123;        int fi = findFather(i);        int fj = findFather(j);        if (fi != fj) &#123;            father[fi] = fj;        &#125;    &#125;    int countFather() &#123;        int count = 0;        for (int i = 1;i &lt; father.size();i++) &#123;            if (father[i] == i) &#123;                count++;            &#125;        &#125;        return count;    &#125;    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) &#123;        initFather(isConnected.size());","categories":["剑指 Offer II"],"tags":["深度优先搜索","广度优先搜索","并查集","图"]},{"title":"剑指 Offer II 113. 课程顺序","url":"/2022/09/15/%E5%89%91%E6%8C%87-Offer-II-113-%E8%AF%BE%E7%A8%8B%E9%A1%BA%E5%BA%8F/","content":"剑指 Offer II 113. 课程顺序DescriptionDifficulty: 中等  \nRelated Topics: 深度优先搜索, 广度优先搜索, 图, 拓扑排序\n现在总共有 numCourses 门课需要选，记为 0 到 numCourses-1。\n给定一个数组 prerequisites ，它的每一个元素 prerequisites[i] 表示两门课程之间的先修顺序。 例如 prerequisites[i] &#x3D; [ai, bi] 表示想要学习课程 ai ，需要先完成课程 bi 。\n请根据给出的总课程数  numCourses 和表示先修顺序的 prerequisites 得出一个可行的修课序列。\n可能会有多个正确的顺序，只要任意返回一种就可以了。如果不可能完成所有课程，返回一个空数组。\n示例 1:\n输入: numCourses = 2, prerequisites = [[1,0]] 输出: [0,1]解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。\n\n示例 2:\n输入: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]输出: [0,1,2,3] or [0,2,1,3]解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。 因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。\n\n示例 3:\n输入: numCourses = 1, prerequisites = [] 输出: [0]解释: 总共 1 门课，直接修第一门课就可。\n\n提示:\n\n1 &lt;= numCourses &lt;= 2000\n0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)\nprerequisites[i].length == 2\n0 &lt;= ai, bi &lt; numCourses\nai != bi\nprerequisites 中不存在重复元素\n\n注意：本题与主站 210 题相同：https://leetcode-cn.com/problems/course-schedule-ii/\nSolutionLanguage: C++\n        for (int i = 0;i &lt; prerequisites.size();i++) &#123;            degree[prerequisites[i][0]]++;            graph[prerequisites[i][1]].push_back(prerequisites[i][0]);        &#125;        queue&lt;int&gt; now;        for (int i = 0;i &lt; degree.size();i++) &#123;            if (degree[i] == 0) &#123;                now.push(i);            &#125;        &#125;        while (now.size() != 0) &#123;            int ele = now.front();            now.pop();            res.push_back(ele);            for (int i = 0;i &lt; graph[ele].size(); i++) &#123;                degree[graph[ele][i]]--;                if (degree[graph[ele][i]] == 0) &#123;                    now.push(graph[ele][i]);                &#125;            &#125;        &#125;    vector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;        degree = vector&lt;int&gt; (numCourses);        graph = vector&lt;vector&lt;int&gt;&gt; (numCourses);    vector&lt;int&gt; degree;    vector&lt;int&gt; res;    vector&lt;vector&lt;int&gt;&gt; graph;class Solution &#123;public:","tags":["深度优先搜索","广度优先搜索","图","拓扑排序"]},{"title":"算法&数据结构 并查集","url":"/2022/09/15/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B6%E6%9F%A5%E9%9B%86/","content":"","tags":["数据结构 并查集"]},{"title":"剑指 Offer II 118. 多余的边","url":"/2022/09/15/%E5%89%91%E6%8C%87-Offer-II-118-%E5%A4%9A%E4%BD%99%E7%9A%84%E8%BE%B9/","content":"剑指 Offer II 118. 多余的边DescriptionDifficulty: 中等  \nRelated Topics: 深度优先搜索, 广度优先搜索, 并查集, 图\n树可以看成是一个连通且无环的无向图。\n给定往一棵 n 个节点 (节点值 1～n) 的树中添加一条边后的图。添加的边的两个顶点包含在 1 到 n 中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 n 的二维数组 edges ，edges[i] &#x3D; [ai, bi] 表示图中在 ai 和 bi 之间存在一条边。\n请找出一条可以删去的边，删除后可使得剩余部分是一个有着 n 个节点的树。如果有多个答案，则返回数组 edges 中最后出现的边。\n示例 1：\n\n输入: edges = [[1,2],[1,3],[2,3]]输出: [2,3]\n\n示例 2：\n\n输入: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]输出: [1,4]\n\n提示:\n\nn == edges.length\n3 &lt;= n &lt;= 1000\nedges[i].length == 2\n1 &lt;= ai &lt; bi &lt;= edges.length\nai != bi\nedges 中无重复元素\n给定的图是连通的\n\n \n注意：本题与主站 684 题相同： https://leetcode-cn.com/problems/redundant-connection/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;int&gt; father;    int findFather(int i) &#123;        if (i == father[i]) &#123;            return i;        &#125; else &#123;            int f = findFather(father[i]);            father[i] = f;            return f;        &#125;    &#125;    void unionij(int i, int j) &#123;        int Fi = findFather(i);        int Fj = findFather(j);        if (Fi != Fj) &#123;            father[Fi] = Fj;        &#125;    &#125;    vector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) &#123;        for (int i = 0;i &lt;= edges.size();i++) &#123;            father.push_back(i);        &#125;        for (int i = 0;i &lt; edges.size();i++) &#123;            if (findFather(edges[i][0]) == findFather(edges[i][1])) &#123;                return edges[i];            &#125;","categories":["剑指 Offer II"],"tags":["深度优先搜索","广度优先搜索","并查集","图"]}]