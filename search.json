[{"title":"Linux chsh 命令","url":"/2022/09/11/Linux-chsh-%E5%91%BD%E4%BB%A4/","content":"Linux chsh命令用于更换用户shell\n在/etc/shells文件中存储了可使用的shell信息，可以在查看后再进行选择修改\n- 修改当前用户的shell:  chsh- Change the login shell of the current user:  chsh -s &#123;&#123;path/to/shell&#125;&#125;- Change the login shell for a given user:  chsh -s &#123;&#123;path/to/shell&#125;&#125; &#123;&#123;username&#125;&#125;- List available shells:  chsh --list-shells","categories":["Linux 命令"]},{"title":"Linux du 命令","url":"/2022/09/09/Linux-du-%E5%91%BD%E4%BB%A4/","content":"Linux du 命令用于查看目录或文件的大小\n- 展示目录或子目录的大小 B/Kib/MiB:  du -&#123;&#123;b|k|m&#125;&#125; &#123;&#123;path/to/directory&#125;&#125;- 展示目录或文件的大小 -h便于阅读:  du -h &#123;&#123;path/to/directory&#125;&#125;- Show the size of a single directory, in human-readable units:  du -sh &#123;&#123;path/to/directory&#125;&#125;- List the human-readable sizes of a directory and of all the files and directories within it:  du -ah &#123;&#123;path/to/directory&#125;&#125;- List the human-readable sizes of a directory and any subdirectories, up to N levels deep:  du -h --max-depth=N &#123;&#123;path/to/directory&#125;&#125;- List the human-readable size of all .jpg files in subdirectories of the current directory, and show a cumulative total at the end:  du -ch &#123;&#123;*/*.jpg&#125;&#125;","categories":["Linux 命令"],"tags":["Linux"]},{"title":"Linux find 命令","url":"/2022/09/11/Linux-find-%E5%91%BD%E4%BB%A4/","content":"Linux find命令用于查找文件或目录\n- 通过表达式查找文件:  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.ext&#125;&#125;&#x27;- 通过路径或文件名查找文件:  find &#123;&#123;root_path&#125;&#125; -path &#x27;&#123;&#123;**/path/**/*.ext&#125;&#125;&#x27; -or -name &#x27;&#123;&#123;*pattern*&#125;&#125;&#x27;- Find directories matching a given name, in case-insensitive mode:  find &#123;&#123;root_path&#125;&#125; -type d -iname &#x27;&#123;&#123;*lib*&#125;&#125;&#x27;- Find files matching a given pattern, excluding specific paths:  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.py&#125;&#125;&#x27; -not -path &#x27;&#123;&#123;*/site-packages/*&#125;&#125;&#x27;- Find files matching a given size range:  find &#123;&#123;root_path&#125;&#125; -size &#123;&#123;+500k&#125;&#125; -size &#123;&#123;-10M&#125;&#125;- Run a command for each file (use &#123;&#125; within the command to access the filename):  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.ext&#125;&#125;&#x27; -exec &#123;&#123;wc -l &#123;&#125; &#125;&#125;\\;- Find files modified in the last 7 days and delete them:  find &#123;&#123;root_path&#125;&#125; -daystart -mtime -&#123;&#123;7&#125;&#125; -delete- Find empty (0 byte) files and delete them:  find &#123;&#123;root_path&#125;&#125; -type &#123;&#123;f&#125;&#125; -empty -delete","categories":["Linux 命令"]},{"title":"Linux uname 命令","url":"/2022/09/09/Linux-uname-%E5%91%BD%E4%BB%A4/","content":"Linux uname 命令用于显示系统信息\n","categories":["Linux 命令"]},{"title":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-003-%E5%89%8D-n-%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD-1-%E7%9A%84%E4%B8%AA%E6%95%B0/","content":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数DescriptionDifficulty: 简单  \nRelated Topics: 位运算, 动态规划\n给定一个非负整数 n，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。\n示例 1:\n输入: n = 2输出: [0,1,1]解释: 0 --&gt; 01 --&gt; 12 --&gt; 10\n\n示例 2:\n输入: n = 5输出: [0,1,1,2,1,2]解释:0 --&gt; 01 --&gt; 12 --&gt; 103 --&gt; 114 --&gt; 1005 --&gt; 101\n\n说明 :\n\n0 &lt;&#x3D; n &lt;&#x3D; 105\n\n进阶:\n\n给出时间复杂度为 O(n*sizeof(integer))的解答非常容易。但你可以在线性时间 O(n)内用一趟扫描做到吗？\n要求算法的空间复杂度为 O(n) 。\n你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。\n\n注意：本题与主站 338 题相同：https://leetcode-cn.com/problems/counting-bits/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;int&gt; countBits(int n) &#123;        vector&lt;int&gt; result;        for (int i = 0; i &lt;= n;i++) &#123;            if (i == 0) &#123;                result.push_back(0);            &#125; else if (i % 2 == 0) &#123;                result.push_back(result[i / 2]);            &#125; else &#123;                result.push_back(result[i / 2] + 1);            &#125;        &#125;        return result;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["位运算","动态规划","简单"]},{"title":"剑指 Offer II 014. 字符串中的变位词","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-014-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8F%98%E4%BD%8D%E8%AF%8D/","content":"剑指 Offer II 014. 字符串中的变位词DescriptionDifficulty: 中等  \nRelated Topics: 哈希表, 双指针, 字符串, 滑动窗口\n给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1的某个变位词。\n换句话说，第一个字符串的排列之一是第二个字符串的 子串 。\n示例 1：\n输入: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;输出: True解释: s2 包含 s1 的排列之一 (&quot;ba&quot;).\n\n示例 2：\n输入: s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;输出: False\n\n提示：\n\n1 &lt;&#x3D; s1.length, s2.length &lt;&#x3D; 104\ns1 和 s2 仅包含小写字母\n\n注意：本题与主站 567 题相同： https://leetcode-cn.com/problems/permutation-in-string/\nSolutionLanguage: C++\nclass Solution &#123;public:    int tar[26];    int src[26];    bool isEqual() &#123;        for (int i = 0;i &lt; 26;i++) &#123;            if(tar[i] != src[i]) &#123;                return false;            &#125;        &#125;        return true;    &#125;    bool checkInclusion(string s1, string s2) &#123;        if (s1.length() &gt; s2.length()) &#123;            return false;        &#125;        for (int i = 0;i &lt; s1.length();i++) &#123;            src[s1[i] - &#x27;a&#x27;]++;            tar[s2[i] - &#x27;a&#x27;]++;        &#125;        int start = 0;        int end = s1.length();        while (end &lt; s2.length()) &#123;            if (isEqual()) &#123;                return true;            &#125;            tar[s2[start++] - &#x27;a&#x27;]--;            tar[s2[end++] - &#x27;a&#x27;]++;        &#125;        if (isEqual()) &#123;            return true;        &#125;        return false;","categories":["剑指 Offer II"],"tags":["哈希表","双指针","字符串","滑动窗口"]},{"title":"剑指 Offer II 038. 每日温度","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-038-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","content":"剑指 Offer II 038. 每日温度DescriptionDifficulty: 中等  \nRelated Topics: 栈, 数组, 单调栈\n请根据每日 气温 列表 temperatures ，重新生成一个列表，要求其对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。\n示例 1:\n输入: temperatures = [73,74,75,71,69,72,76,73]输出: [1,1,4,2,1,1,0,0]\n\n示例 2:\n输入: temperatures = [30,40,50,60]输出: [1,1,1,0]\n\n示例 3:\n输入: temperatures = [30,60,90]输出: [1,1,0]\n\n提示：\n\n1 &lt;&#x3D; temperatures.length &lt;&#x3D; 105\n30 &lt;= temperatures[i] &lt;= 100\n\n注意：本题与主站 739 题相同： https://leetcode-cn.com/problems/daily-temperatures/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) &#123;        stack&lt;pair&lt;int,int&gt;&gt; tmp;        vector&lt;int&gt; res;        for (int i = temperatures.size() - 1;i &gt;= 0;i--) &#123;            while (tmp.size() != 0 &amp;&amp; temperatures[i] &gt;= tmp.top().first) &#123;                tmp.pop();            &#125;            if (tmp.size() == 0) &#123;                res.push_back(0);            &#125; else &#123;                res.push_back(tmp.top().second - i);            &#125;            tmp.push(make_pair(temperatures[i],i));        &#125;        vector&lt;int&gt; reverse;        for (int i = res.size() - 1;i &gt;= 0;i--) &#123;            reverse.push_back(res[i]);        &#125;        return reverse;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["栈","数组","单调栈"]},{"title":"剑指 Offer II 049. 从根节点到叶节点的路径数字之和","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-049-%E4%BB%8E%E6%A0%B9%E8%8A%82%E7%82%B9%E5%88%B0%E5%8F%B6%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/","content":"剑指 Offer II 049. 从根节点到叶节点的路径数字之和DescriptionDifficulty: 中等  \nRelated Topics: 树, 深度优先搜索, 二叉树\n给定一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。\n每条从根节点到叶节点的路径都代表一个数字：\n\n例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。\n\n计算从根节点到叶节点生成的 所有数字之和 。\n叶节点 是指没有子节点的节点。\n示例 1：\n\n输入：root = [1,2,3]输出：25解释：从根到叶子节点路径 1-&gt;2 代表数字 12从根到叶子节点路径 1-&gt;3 代表数字 13因此，数字总和 = 12 + 13 = 25\n\n示例 2：\n\n输入：root = [4,9,0,5,1]输出：1026解释：从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491从根到叶子节点路径 4-&gt;0 代表数字 40因此，数字总和 = 495 + 491 + 40 = 1026\n\n提示：\n\n树中节点的数目在范围 [1, 1000] 内\n0 &lt;= Node.val &lt;= 9\n树的深度不超过 10\n\n注意：本题与主站 129 题相同： https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/\nSolutionLanguage: C++\n/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */class Solution &#123;public:    int sum = 0;    void DFS(TreeNode* root, int i) &#123;        if (root == nullptr) &#123;            return;        &#125;        i = i * 10 + root -&gt; val;        if (root -&gt; left == nullptr &amp;&amp; root -&gt; right == nullptr) &#123;            sum += i;        &#125;        DFS(root -&gt; left, i);        DFS(root -&gt; right, i);    &#125;    int sumNumbers(TreeNode* root) &#123;        DFS(root,0);        return sum;    &#125;&#125;;","categories":["剑指 Offer II"],"tags":["树","深度优先搜索","二叉树"]}]