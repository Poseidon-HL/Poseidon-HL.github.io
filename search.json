[{"title":"Linux find 命令","url":"/2022/09/11/Linux-find-%E5%91%BD%E4%BB%A4/","content":"Linux find命令用于查找文件或目录\n- 通过表达式查找文件:  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.ext&#125;&#125;&#x27;- 通过路径或文件名查找文件:  find &#123;&#123;root_path&#125;&#125; -path &#x27;&#123;&#123;**/path/**/*.ext&#125;&#125;&#x27; -or -name &#x27;&#123;&#123;*pattern*&#125;&#125;&#x27;- Find directories matching a given name, in case-insensitive mode:  find &#123;&#123;root_path&#125;&#125; -type d -iname &#x27;&#123;&#123;*lib*&#125;&#125;&#x27;- Find files matching a given pattern, excluding specific paths:  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.py&#125;&#125;&#x27; -not -path &#x27;&#123;&#123;*/site-packages/*&#125;&#125;&#x27;- Find files matching a given size range:  find &#123;&#123;root_path&#125;&#125; -size &#123;&#123;+500k&#125;&#125; -size &#123;&#123;-10M&#125;&#125;- Run a command for each file (use &#123;&#125; within the command to access the filename):  find &#123;&#123;root_path&#125;&#125; -name &#x27;&#123;&#123;*.ext&#125;&#125;&#x27; -exec &#123;&#123;wc -l &#123;&#125; &#125;&#125;\\;- Find files modified in the last 7 days and delete them:  find &#123;&#123;root_path&#125;&#125; -daystart -mtime -&#123;&#123;7&#125;&#125; -delete- Find empty (0 byte) files and delete them:  find &#123;&#123;root_path&#125;&#125; -type &#123;&#123;f&#125;&#125; -empty -delete","categories":["Linux 命令"]},{"title":"Linux du 命令","url":"/2022/09/09/Linux-du-%E5%91%BD%E4%BB%A4/","content":"Linux du 命令用于查看目录或文件的大小\n- 展示目录或子目录的大小 B/Kib/MiB:  du -&#123;&#123;b|k|m&#125;&#125; &#123;&#123;path/to/directory&#125;&#125;- 展示目录或文件的大小 -h便于阅读:  du -h &#123;&#123;path/to/directory&#125;&#125;- Show the size of a single directory, in human-readable units:  du -sh &#123;&#123;path/to/directory&#125;&#125;- List the human-readable sizes of a directory and of all the files and directories within it:  du -ah &#123;&#123;path/to/directory&#125;&#125;- List the human-readable sizes of a directory and any subdirectories, up to N levels deep:  du -h --max-depth=N &#123;&#123;path/to/directory&#125;&#125;- List the human-readable size of all .jpg files in subdirectories of the current directory, and show a cumulative total at the end:  du -ch &#123;&#123;*/*.jpg&#125;&#125;","categories":["Linux 命令"],"tags":["Linux"]},{"title":"Linux uname 命令","url":"/2022/09/09/Linux-uname-%E5%91%BD%E4%BB%A4/","content":"Linux uname 命令用于显示系统信息\n","categories":["Linux 命令"]},{"title":"Linux chsh 命令","url":"/2022/09/11/Linux-chsh-%E5%91%BD%E4%BB%A4/","content":"Linux chsh命令用于更换用户shell\n在/etc/shells文件中存储了可使用的shell信息，可以在查看后再进行选择修改\n- 修改当前用户的shell:  chsh- Change the login shell of the current user:  chsh -s &#123;&#123;path/to/shell&#125;&#125;- Change the login shell for a given user:  chsh -s &#123;&#123;path/to/shell&#125;&#125; &#123;&#123;username&#125;&#125;- List available shells:  chsh --list-shells","categories":["Linux 命令"]},{"title":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数","url":"/2022/09/11/%E5%89%91%E6%8C%87-Offer-II-003-%E5%89%8D-n-%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD-1-%E7%9A%84%E4%B8%AA%E6%95%B0/","content":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数DescriptionDifficulty: 简单  \nRelated Topics: 位运算, 动态规划\n给定一个非负整数 n，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。\n示例 1:\n输入: n = 2输出: [0,1,1]解释: 0 --&gt; 01 --&gt; 12 --&gt; 10\n\n示例 2:\n输入: n = 5输出: [0,1,1,2,1,2]解释:0 --&gt; 01 --&gt; 12 --&gt; 103 --&gt; 114 --&gt; 1005 --&gt; 101\n\n说明 :\n\n0 &lt;&#x3D; n &lt;&#x3D; 105\n\n进阶:\n\n给出时间复杂度为 O(n*sizeof(integer))的解答非常容易。但你可以在线性时间 O(n)内用一趟扫描做到吗？\n要求算法的空间复杂度为 O(n) 。\n你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。\n\n注意：本题与主站 338 题相同：https://leetcode-cn.com/problems/counting-bits/\nSolutionLanguage: C++\nclass Solution &#123;public:    vector&lt;int&gt; countBits(int n) &#123;        vector&lt;int&gt; result;        for (int i = 0; i &lt;= n;i++) &#123;            if (i == 0) &#123;                result.push_back(0);            &#125; else if (i % 2 == 0) &#123;                result.push_back(result[i / 2]);            &#125; else &#123;                result.push_back(result[i / 2] + 1);            &#125;        &#125;        return result;    &#125;&#125;;"}]